To Dos:
 - simulate contextio with hard coding  "when was the last time I interacted with Alfred Pennyworth?"
 - display email, phone and title
 - add title to workflow
 - skip command will show prompt for all commands
 - add all commands to initial welcome and help





Connect etanproject.org@gmail.com to contextio API
Create helper file with all contextio commands
Figure out how to edit existing table (build out that functionality)


Questions for Elijah:
database set up - why isn't it populating locally? I'd like to be able to verify data that's been added
--> delete contact
view contacts (display as table)
update name
update email
update gender
update phone
validate phone  gem install validates_phone_number   DONE (where does the class go? added to model phone.rb)
			    class Person < ActiveRecord::Base
			      validates :mobile, :phone_number => {:message => "invalid and can only be attributable to human error"}
			    end
                what does the top of the create contact defined method mean? Do I need to add that somewhere?         

Questions:
Why isn't my contact table migrating and seeding into my app database? (it's working in )
How do I generate a random list of thank you's?
Can I use this to validate phone numbers? It seems complex: https://github.com/carr/phone
Did I use class the right way?   I didn't create String.rb 
		I had to comment out this class because it was breaking my helper.
		http://stackoverflow.com/questions/5912690/is-there-a-gem-that-normalizes-and-format-us-phone-numbers-in-ruby
        #is there a shorter way to reference event.formatted_text.convert_to_phone.format_phone here?


Done:
Figured out how to link a new helper file to the app  
    Define new letter
	Define new function
	Ddd function to bottom of app
	Add helpers Sinatra::CommandsCreateContact to top of app
Figure out how to display a table of contact_id and name	
Why am I getting duplicate responses? It seems like it's not checking if the bot is the user.
thanks array (correct format to alternate through my list of thank you notes)



Phone Validation
https://github.com/tejasmanohar/timgur/blob/master/app.rb
   what is Orchestrate::Application?
http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone

#--------------------------------------------------------------------------------
# not sure how to install this one
#--------------------------------------------------------------------------------

require "active_support/all"

module Helpers
  extend ActiveSupport::NumberHelper
end

Helpers.number_to_currency(10.23) # => "$10.23"

#--------------------------------------------------------------------------------
# didn't work when the only thing I did was create these files
#--------------------------------------------------------------------------------

# app/validators/phone_number_validator.rb
class PhoneNumberValidator < ActiveModel::EachValidator
  @@regex = %r{\A(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})(?:(?<=\(\d{3})\))? ?(?:(?<=\d{3})[.-])?([2-9]\d{2})[. -]?(\d{4})(?: (?:ext|x)\.? ?(\d{1,5}))?\Z}

  def validate_each (object, attribute, value)
    if m = value.match(@@regex)
      # format the phone number consistently
      object.send("#{attribute}=", "(#{m[1]}) #{m[2]}-#{m[3]}")
    else
      object.errors[attribute] << (options[:message] || "is not an appropriately formatted phone number")
    end
  end
end

# app/models/foobar.rb
class Foobar < ActiveRecord::Base
  validates :phone, phone_number: true
end

#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------

http://stackoverflow.com/questions/5912690/is-there-a-gem-that-normalizes-and-format-us-phone-numbers-in-ruby
https://github.com/carr/phone
def formatted_number(number)
  digits = number.gsub(/\D/, '').split(//)

  if (digits.length == 11 and digits[0] == '1')
    # Strip leading 1
    digits.shift
  end

  if (digits.length == 10)
    # Rejoin for latest Ruby, remove next line if old Ruby
    digits = digits.join
    '(%s) %s-%s' % [ digits[0,3], digits[3,3], digits[6,4] ]
  end
end
